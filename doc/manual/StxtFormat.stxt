+++++
Title: STXT Manual: STXT Format
+++++

= STXT Format =================================================================

STXT is designed to be extremely human-readable. Many of the formatting symbols
are the same ones people have been using in text editors and chatrooms for
decades.

== Skipping Symbols ===================

While I would normally put this off until we have covered the basic symbols, it
is necessary for people who are reading this in the stxt version understand
this immediately.

When you precede a formatting symbol with a backslash (\) it will not be
processed, but rather displayed literally (after removing the backslash). So
:\\\*boo*: will be displayed as :\*boo*:. This also works for not processing
the backslash, making :\\\\\*boo*: display as :\\*boo*:.

If you're worried about typing Windows-style paths (:C\:\foo\bar:), there's not
much to be concerned about. The backslash only acts as an escape character when
it's followed by an STXT symbol, so you don't have to double-up all the
backslashes (although, it'll still work if you do).

*Note*: If you are reading this in stxt form, you'll notice that there are more
backslashes than you were probably expecting. This is because, as per the rule
just stated, we have had to double them up to make them display correctly for
people reading a processed version.

== Markup =============================

When writing text, there are a number of ways to display words or phrases. In
STXT, putting the correct symbol on either side of some text will change its
display.

; * -- \*bold* *bold*
; _ -- \_italic_ _italic_
; : -- \:monospace: :monospace:
; ^ -- \^super\^script ^super^script
; ~ -- \~sub\~script ~sub~script

=== Bold ===

To make some text *bold*, you put an asterisk (\*) on either side of it. This is
one of the most obvious markup symbols, and you've probably seen it in many
places.

=== Italic ===

_Italic_ uses another fairly universal symbol, the underscore (\_). It works
just like the bold. Some people claim that the underscore should be used for
underlines, but we maintain that underlines are just bad style. The underline
was introduced along with the typewriter. There was no way to type italics, and
so putting underscores below characters indicated that they were to be thought
of as italicized. While useful in that niche, underlining should die with the
typewriter.

=== Monospace ===

Often, you want to include text as displayed from the output of a command, or
to be typed on a keyboard, etc. This is usually displayed in a :monospace: font.
To make something monospace, put a colon (\:) on either side of it.

=== Superscript and Subscript ===

It's not to uncommon to need something to be ^super^script. Footnote indicators,
exponents, etc. ~Sub~scripts are also common, as in H~2~O. These are slightly
different from the other markup types, because they can happen within a word.
So, where you would escape, say, a bold by doing \\\*bold*, you have to escape
a superscript by doing \\\^super\\\^script. Otherwise, the second part will be
interpreted as the beginning of a superscript.

=== Links and Images ===

Links that just appear inline with the scheme listed (http, ftp, etc.) are
discovered, with the text being the URL. You can also indicate links with
square brackets:

::
[http://valentsolutions.com/] or http://valentsolutions.com/
::

[http://valentsolutions.com/] or http://valentsolutions.com/

You can also add optional text after a pipe (|):

::
[http://valentsolutions.com/ | Valent Solutions Inc.]
::

[http://valentsolutions.com/ | Valent Solutions Inc.]

Bare email addresses (info@valentsolutions.com) are also discovered.

Images are pretty much the same, except they use curly braces (:\{foo.gif}:)
with optional text that will be used in formats that don't support images
(:\{foo.gif | foo}:).

{foo.gif | foo}

== Paragraphs and Blocks ==============

Now that we've gone over the basic markup, lets look at the parts that give
structure to the overall document. Things like headings, paragraphs, and lists.

=== Headings ===

Headings are created with a leading equals (:=:). Also, in formats that allow
internal links (HTML, most XML formats, etc.) you can refer to them with a
specially formed link:

::
[#_Important_Stuff | see important stuff]

=== Important Stuff
::

It's preceded by an underscore, then any character that is not a letter, digit,
., -, \_, or \: will be replaced by an underscore.

=== Code ===

Code blocks are pretty much a larger version of monospace. Just like you
indicate monospace with a colon, you indicate code with a double-colon. Inside
a code block, no processing (with the exception of being able to escape code
block delimiters) is done. All lines are passed to the output as-is.

Also, since code blocks may contain blank lines, there is another double-colon
at the end. This differs from other blocks, but makes sense here.

::
\::
This is a code block.
This will be on a separate line.

This is *not bold* and this is _not italic_

* this
* is
* not
* a
* list
\::
::

=== Lists ===

Ordered and unordered lists are simple, just begin each line with an asterisk
for an unordered list, or a octothorpe (#) for an ordered list.

::
* unordered
* list

# ordered
# list
::

becomes:

* unordered
* list

# ordered
# list

The is another kind of list, often called a dictionary list or Q&A list. This
kind of list has a key and a value, and is indicated as follows:

::
; key -- value
::

which ends up looking like:

; key -- value

==== Why don't we allow numbers to indicate an ordered list?

Many wikis use numbers to indicate an ordered list, because it shows the
ordering in the structured text as well. What happens when you insert a row
near the beginning of a long ordered list? You walk through fixing all the
other numbers, just as if the file was the final format you'd be looking at. Of
course, the numbers don't have to be in the right order, so you don't _have_ to
walk through fixing them all. But, if you're not going to, then why are you
using numbers there at all?

=== Tables ===

Unfortunately, tables are not yet supported. They are planned, though.

== Metadata ===========================

At this point, you've gotten enough to build an entire document. The only piece
that's remaining is information that describes your document, rather than being
displayed in it.

The structure of our metadata is simple. It begins and ends with :+++++:.
Inside that block, there are a series of key-value pairs, separated with a
colon. It looks something like this:

::
+++++
Title: The Story of Jack and Jill
Author: Greg Pfeil <greg@valentsolutions.com>
Date: 2003-04-05
Summary: Jack and Jill go up a hill to fetch a pail of water. Jack falls and
   injures himself, and Jill throws herself after him.
+++++
::

The actual keys and values are nothing special, they can be whatever you like.
Note how the description is broken onto multiple lines. A value can be as many
lines long as you like, provided the subsequent lines have whitespace in front
of them.

The keys are case insensitive, so "Title" is the same as "title" and "TITLE".
You can reference these keys in your own XSLT files, and some (like "Title",
"Date", and "Author") are referenced in the default XSLT files.
